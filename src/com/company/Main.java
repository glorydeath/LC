package com.company;

import com.company.Playground.CorpusGenerator;
import com.company.Playground.GameOfChecker;
import com.company.Playground.RestoreIP;
import com.company.Problems.*;
import com.company.Utils.ListNode;
import com.company.Utils.TreeNode;

import java.util.Arrays;
import java.util.List;

public class Main {

    public static void main(String[] args) {
//        int[][] grid = {{1},{2},{3},{4},{7},{6},{5}};
//        P1260.shiftGrid(grid, 23);
//        String[] words = {"the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is"};
//        String[] words2 = {"i", "love", "leetcode", "i", "love", "coding"};
//        P692 p692 = new P692();
//        System.out.println(p692.topKFrequent(words2, 2));
//        System.out.println(P77.combine(4,2));
//        int[] candidates = {2,3,6,7};
//        P39.combinationSum(candidates, 7);
//        int[] nums = {1,2,3};
//        P384 p384 = new P384(nums);
//        System.out.println(Arrays.toString(p384.shuffle()));
//        System.out.println(Arrays.toString(p384.reset()));
//        System.out.println(Arrays.toString(p384.shuffle()));
//        P15 p15 = new P15();
//        int[] nums = {-1, 0, 1, 2, -1, -4};
//        int[] nums = {0, 0, 0};
//        p15.threeSum(nums);
//        P18 p18 = new P18();
//        int[] nums = {0,0,0,0};
//        p18.fourSum(nums, 0);
//        System.out.println(P8.myAtoi(" "));
//        System.out.println(P43.multiply("123456789", "987654321"));
//        int[] nums = {1,2,2};
//        System.out.println(P90.subsetsWithDup(nums));
//        char[][] board = {{'X','O','X','O','X','O'}, {'O','X','O','X','O','X'},{'X','O','X','O','X','O'}, {'O','X','O','X','O','X'}};
//        P130.solve(board);
//        P165.compareVersion("0.1", "1.1");
//        System.out.println(P96.numTrees(4));
//        P86.runProblem();
//        P120.runProblem();
//        int[] nums = {-1,4,2,1,9,10};
//        P41.firstMissingPositive(nums);
//        int[] heights = {0,1,0,2,1,0,1,3,2,1,2,1};
//        System.out.println(P42.trap(heights));
//        int[] heights = {2,1,5,6,2,3};
//        int[] heights = {1, 1};
//        int[] heights = {2, 1, 2};
//        System.out.println(P84.largestRectangleArea(heights));
//        int[][] grid = {{0, 0, 0}, {1, 1, 0}, {1, 1, 0}};
//        P1091 p1091 = new P1091();
//        System.out.println(p1091.shortestPathBinaryMatrix(grid));
//        int[] nums = {1};
//        System.out.println(P347.topKFrequent(nums, 1));
//        int[] nums = {3,2,3,1,2,4,5,5,6};
//        P215 p215 = new P215();
//        System.out.println(p215.findKthLargest(nums, 4));
//        int[][] grid = {{1,1,0,0,0}, {1,1,0,0,0}, {0,0,0,1,1}, {0,0,0,1,1}};
//        P695 p695 = new P695();
//        System.out.println(p695.maxAreaOfIsland(grid));
//        P215 p215 = new P215();
//        int[] nums = {3,2,3,1,2,4,5,5,6};
//        System.out.println(p215.findKthLargest(nums, 4));
//        int[] nums = {3, 1};
//        System.out.println(P33.search(nums, 3));
//        System.out.println(P33.search(nums, 0));
//        int[][] matrix = {{5,1,9,11}, {2,4,8,10}, {13,3,6,7}, {15,14,12,16}};
//        P48.rotate(matrix);
//        int[][] matrix = {{1,2,3,4},{5,6,7,8},{9,10,11,12}};
//        P54.spiralOrder(matrix);
//        TreeNode root = new TreeNode(1, new TreeNode(2, new TreeNode(4), new TreeNode(3)), new TreeNode(2, new TreeNode(4), new TreeNode(3)));
//        P101 p101 = new P101();
//        p101.isSymmetric(root);
//        P93.restoreIpAddresses("0000");
//        ListNode head = new ListNode(-10, new ListNode(-3, new ListNode(0, new ListNode(5, new ListNode(9)))));
//        P109.sortedListToBST(head);
//        ListNode head = new ListNode(3);
//        ListNode node1 = new ListNode(2);
//        ListNode node2 = new ListNode(0);
//        ListNode node3 = new ListNode(-4);
//        head.next = node1;
//        node1.next = node2;
//        node2.next = node3;
//        node3.next = node1;
//        P142.detectCycle(head);
//        int[] nums = {-4,-3,-2};
//        System.out.println(P152.maxProduct(nums));
//        ListNode headC = new ListNode(8, new ListNode(4, new ListNode(5, null)));
//        ListNode headA = new ListNode(4, new ListNode(1, headC));
//        ListNode headB = new ListNode(5, new ListNode(0, new ListNode(1, headC)));
//        P160.getIntersectionNode(headA, headB);
//        P202.isHappy(19);
//        P204.countPrimes(5);
//        int[] nums = {2,3,1,2,4,3};
//        P209.minSubArrayLen(7, nums);
//        int[] nums = {-2147483648};
//        P229.majorityElement(nums);
//        int[][] prerequisites = {{0,1}, {1,0}};
//        int[] results = P210.findOrder(2, prerequisites);
//        String s = " 3/2 ";
//        System.out.println(P227.calculate(s));
//        P232 p232 = new P232();
//        p232.push(1);
//        p232.push(2);
//        System.out.println(p232.peek());
//        p232.push(3);
//        System.out.println(p232.peek());
//        int[] nums = {1,3,5};
//        P307 p307 = new P307(nums);
//        System.out.println(p307.sumRange(0, 2));
//        p307.update(1, 2);
//        System.out.println(p307.sumRange(0, 2));
//        int[][] matrix = {{3,0,1,4,2},{5,6,3,2,1},{1,2,0,1,5},{4,1,0,1,7},{1,0,3,0,5}};
//        P304 p304 = new P304(matrix);
//        p304.sumRegion(2,1,4,3);
//        p304.sumRegion(1,1,2,2);
//        p304.sumRegion(1,2,2,4);
//        P264.nthUglyNumber(12);
//        int[] primes = {2,7,13,19};
//        P313.nthSuperUglyNumber(12, primes);
//        P59.generateMatrix(3);
//        TreeNode root = new TreeNode(3, new TreeNode(9), new TreeNode(20, new TreeNode(15), new TreeNode(7)));
//        P107 p107 = new P107();
//        p107.levelOrderBottom(root);
//        P119.getRow(3);
//        P468.validIPAddress("2001:0db8:85a3:0:0:8A2E:0370:7334:");
//        char[][] board = {{'O', '.', 'O', '.', 'O', '.', 'O'}, {'.', '.', '.', '.', '.', '.', '.'},
//                {'.', '.', '.', '.', '.', '.', '.'}, {'X', '.', 'X', '.', 'X', '.', 'X'}};
//        GameOfChecker checker = new GameOfChecker();
//        List list = checker.nextMove(board, true);
//        System.out.println(list);
//        System.out.println(RestoreIP.restoreIpAddresses("25525511135"));
        CorpusGenerator corpus = new CorpusGenerator("this is a good example, this is not a bad example.", 5);
        corpus.generate();
    }
}
